{"version":3,"file":"games-engine.js","mappings":"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Z1C,E,+BCJ/B,W,oBA+BA,aAAc,GAFd,YACA,W,sBAcgC,aAAoB,QAClB,mB,sEA1ByB,aAAc,G,MnDJzB,EAAnB,EAAmB,WAAyB,EAAX,MAAd,EAAc,KAAd,EAAc,WmDKiB,W,eCoD3E,O,S7ErDkG,EAAvC,GAAiB,MA6DwvB,GA7DvuB,M,E6EqDvE,GAAtB,E,qBAtEiF,Y,gBAGS,MC0T9C,iB,ED1T8C,IC0TnC,gB,qBDpTuC,mC,gBAGV,kC,gBAGG,kC,gBAGN,kC,gBAGM,kC,gBAGG,kC,gBAGD,qB,gBAGC,kC,gBAGQ,yB,gBAGS,mBCyOhE,G,EDzOgE,ICyOhC,iBAAhB,EAAE,Q,qBDtO2C,mBCyOhE,G,EDzOgE,ECyOhD,cAAsC,cAAhB,EAAE,Q,qBDtOsB,gBCoO9D,GDpO8D,ECoO9C,U,gBDjOkD,gBCkOjE,GDlOiE,ECkOjD,W,gBD/N2C,gBCiO7D,GDjO6D,ECiO7C,W,gBD9N2C,mBCiO1D,G,EDjO0D,ICiO1B,cAAhB,EAAE,Q,qBD9NkD,gBC4NnE,GD5NmE,EC4NnD,a,gBDzNsD,gBC0NrE,GD1NqE,EC0NrD,a,4BrDpR7B,OoDClB,mBAA8D,MAAM,I,MpDI3E,OoDDU,mBAAiE,SAAS,IAGzE,e,MpDEmF,QoDCnF,mBAAmE,UAAU,I,MpDIvD,OoDDzB,mBAA+D,OAAO,I,MpDK7D,OoDFR,mBAAgE,QAAQ,I,MpDM9D,OoDHZ,mBAA8D,MAAM,I,MpDQ7D,OoDLL,mBAAgE,QAAQ,I,MpDWrF,OoDRc,mBAAiE,SAAS,I,MpDWE,MoDR7E,mBAAkE,QAAQ,I,MpDQmJ,OoDL5N,mBAAiE,SAAS,I,MpDKsS,MoDF7W,mBAAmE,YAAY,I,MpDEgc,MoDC5gB,mBAAsE,eAAe,I,MpDD4lB,YoDIprB,mBAAyE,YAAY,I,MpDJiwB,UoDOt1B,mBAAuE,YAAY,I,MpDPq6B,WoDUv/B,mBAAyE,aAAa,I,MpDVmkC,WoDa3pC,mBAAuE,WAAW,I,MpDbuuC,MoDgBxzC,mBAAmE,YAAY,I,MpDhBu4C,aoDmBr9C,mBAA2E,aAAa,I,MpDnBuiD,aoDsB9nD,mBAA4E,cAAc,G,gBEzDjH,OAAW,MAAY,QAAQ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","sources":["webpack://games-engine/webpack/universalModuleDefinition","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Collections.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/model/CompositeDrawer.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/model/CompositeMover.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/GameWord.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/colors/colors.kt","webpack://games-engine/../../../../../builtins/Library.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/constants.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Collections.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/dispatcher/ObjectsDispatcher.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/drawers/CircleDrawer.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/drawers/ImagesDrawer.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/image/Images.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Maps.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Standard.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Strings.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/index/ObjectsSquareIndex.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/internal/IdSequence.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/model/Obj.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/model/Vector.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/model/ZeroLengthVector.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/movers/ConstantSpeedMover.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/movers/KeyboardArrowsMover.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/render/HtmlCanvas2dRenderer.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/shapes/IndexGrid.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/shapes/Pointer.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/games/Main.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/games/zombie/ZombieGame.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/games/balloons/BalloonsGame.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/games/wiggly_worm/WigglyWormGame.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/dynamic.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/games/wiggly_worm/Food.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/games/wiggly_worm/SnakesPalette.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/games/wiggly_worm/Tip.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/games/wiggly_worm/Worm.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/games/zombie/objects/KotlinSign.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/games/zombie/objects/PlayerObj.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/games/zombie/objects/Ghost.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/MutableCollections.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/math.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Sequences.kt","webpack://games-engine/../../../../src/main/kotlin/tga/gaming/engine/index/SquareIndex.kt","webpack://games-engine/../../../../../<js-code>","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Arrays.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/LinkedHashSet.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/LinkedHashMap.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Sets.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/Sequences.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractMap.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/ArrayList.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashSet.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/internal/progressionUtil.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/random/Random.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/random/XorWowRandom.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Preconditions.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/PrimitiveRanges.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/ProgressionIterators.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/ranges/Progressions.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Appendable.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/Char.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/char.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/StringNumberConversions.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/stringsCode.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/string.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Ranges.kt","webpack://games-engine/../../../../../runtime/noPackageHacks.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/util/Tuples.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/runtime/primitiveCompanionObjects.kt","webpack://games-engine/../../../../../runtime/kotlinHacks.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableCollection.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableList.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableMap.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/AbstractMutableSet.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/HashMap.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalHashCodeMap.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/console.kt","webpack://games-engine/../../../../../src/kotlin/numbers_js-ir.kt","webpack://games-engine/../../../../../runtime/long.kt","webpack://games-engine/../../../../../runtime/bitUtils.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/numbers.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/random/PlatformRandom.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/KClassImpl.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/primitives.kt","webpack://games-engine/../../../../../runtime/typeCheckUtils.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/reflection.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/StringBuilderJs.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/numberConversions.kt","webpack://games-engine/../../../../../src/generated/_DigitChars.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/CharCode.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/text/regex.kt","webpack://games-engine/../../../../../builtins/Char.kt","webpack://games-engine/../../../../../runtime/arrays.kt","webpack://games-engine/../../../../../runtime/charSequence.kt","webpack://games-engine/../../../../../runtime/numberConversion.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/unsigned/src/kotlin/UShort.kt","webpack://games-engine/../../../../../runtime/collectionsHacks.kt","webpack://games-engine/../../../../../runtime/coreRuntime.kt","webpack://games-engine/../../../../../runtime/hacks.kt","webpack://games-engine/../../../../../runtime/longjs.kt","webpack://games-engine/../../../../../runtime/rangeTo.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/reflect/JsClass.kt","webpack://games-engine/../../../../../src/kotlin/exceptions.kt","webpack://games-engine/../../../../../src/kotlin/jsOperators.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractCollection.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractList.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/AbstractSet.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/collections/PrimitiveIterators.kt","webpack://games-engine/../../../../../jsMainSources/core/builtins/src/kotlin/Unit.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/EqualityComparator.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/common/src/generated/_Strings.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/src/kotlin/text/StringBuilder.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/regexp.kt","webpack://games-engine/../../../../../jsMainSources/libraries/stdlib/js/src/kotlin/collections/InternalMap.kt","webpack://games-engine/../../../../../commonMainSources/libraries/stdlib/common/src/kotlin/MathH.kt","webpack://games-engine/webpack/bootstrap","webpack://games-engine/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"games-engine\"] = factory();\n\telse\n\t\troot[\"games-engine\"] = factory();\n})(this, () => {\nreturn ",null,"package tga.gaming.engine.model\n\nimport org.w3c.dom.CanvasRenderingContext2D\n\nclass CompositeItemDoNotReferToTheObject : RuntimeException(\"This composite item is not for this object\")\n\n\ninterface CompositeDrawer : Drawable {\n\n    val drawers: MutableList<Drawer>\n    fun add(drawer: Drawer) {\n        if (drawer.obj != this) throw CompositeItemDoNotReferToTheObject()\n        drawers.add(drawer)\n    }\n\n    override fun draw(ctx: CanvasRenderingContext2D) {\n        drawers.forEach { it.draw(ctx) }\n    }\n}\n\ninterface Drawer : ObjCompanion {\n    fun draw(ctx: CanvasRenderingContext2D)\n}\n\n","package tga.gaming.engine.model\n\ninterface CompositeMover : Moveable {\n\n    val movers: MutableList<Mover>\n    fun add(mover: Mover) {\n        if (mover.obj != this) throw CompositeItemDoNotReferToTheObject()\n        movers.add(mover)\n    }\n\n    override fun move() {\n        movers.forEach { it.move() }\n    }\n\n}\n\ninterface Mover : ObjCompanion {\n    fun move()\n}","package tga.gaming.engine\n\nimport kotlinx.browser.window\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.TouchEvent\nimport org.w3c.dom.events.KeyboardEvent\nimport org.w3c.dom.events.MouseEvent\nimport org.w3c.dom.pointerevents.PointerEvent\nimport tga.gaming.engine.dispatcher.Dispatcher\nimport tga.gaming.engine.render.GameRenderer\n\nopen class GameWord(\n    val canvas: HTMLCanvasElement,\n    val dispatcher: Dispatcher,\n    val renderer: GameRenderer,\n    var turnDurationMillis: Int = 10\n) {\n\n    private var gameLoopHandler: Int = -1\n\n    var active: Boolean = false\n        private set\n\n    open fun startGame() {\n        run()\n    }\n\n\n    fun togglePause() {\n        if (active) pause() else run()\n    }\n\n    fun run() {\n        if (active) return\n        console.log(\"run()\")\n        active = true\n        runEventListeners()\n        dispatcher.beforeRun()\n        gameLoopHandler = window.setInterval(this::gameLoop, turnDurationMillis)\n        window.setTimeout(\n            { this.paint(window.performance.now()) },\n            turnDurationMillis + turnDurationMillis / 2\n        )\n    }\n\n    fun pause() {\n        console.log(\"pause()\")\n        active = false\n        if (gameLoopHandler != -1) window.clearInterval(gameLoopHandler)\n        gameLoopHandler = -1\n        stopEventListeners()\n    }\n\n    private fun runEventListeners() {\n        window.addEventListener(\"touchmove\",   { e -> propagateTouchMove  (e as TouchEvent) }, false)\n        window.addEventListener(\"touchend\",    { e -> propagateTouchEnd   (e as TouchEvent) }, false)\n        window.addEventListener(\"touchstart\",  { e -> propagateTouchStart (e as TouchEvent) }, false)\n        window.addEventListener(\"touchcancel\", { e -> propagateTouchCancel(e as TouchEvent) }, false)\n\n        window.onmousemove  = { me: MouseEvent -> propagateOnMouseMove (me) }\n        window.onmousedown  = { me: MouseEvent -> propagateOnMouseDown (me) }\n        window.onmouseup    = { me: MouseEvent -> propagateOnMouseUp   (me) }\n        window.onmouseenter = { me: MouseEvent -> propagateOnMouseEnter(me) }\n        window.onmouseleave = { me: MouseEvent -> propagateOnMouseLeave(me) }\n\n        window.ongotpointercapture  = { pe: PointerEvent -> propagateOnGotPointerCapture (pe) }\n        window.onlostpointercapture = { pe: PointerEvent -> propagateOnLostPointerCapture(pe) }\n        window.onpointerdown        = { pe: PointerEvent -> propagateOnPointerDown       (pe) }\n        window.onpointermove        = { pe: PointerEvent -> propagateOnPointerMove       (pe) }\n        window.onpointerup          = { pe: PointerEvent -> propagateOnPointerUp         (pe) }\n        window.onpointercancel      = { pe: PointerEvent -> propagateOnPointerCancel     (pe) }\n        window.onpointerover        = { pe: PointerEvent -> propagateOnPointerOver       (pe) }\n        window.onpointerout         = { pe: PointerEvent -> propagateOnPointerOut        (pe) }\n        window.onpointerenter       = { pe: PointerEvent -> propagateOnPointerEnter      (pe) }\n        window.onpointerleave       = { pe: PointerEvent -> propagateOnPointerLeave      (pe) }\n\n        window.onclick    = { me: MouseEvent -> propagateOnClick(me)    }\n        window.ondblclick = { me: MouseEvent -> propagateOnDblClick(me) }\n\n        window.onkeypress  = { ke: KeyboardEvent -> propagateOnKeyPress(ke) }\n        window.onkeydown   = { ke: KeyboardEvent -> propagateOnKeyDown (ke) }\n        window.onkeyup     = { ke: KeyboardEvent -> propagateOnKeyUp   (ke) }\n\n    }\n\n    open fun propagateTouchMove  (e: TouchEvent) { dispatcher.onTouchMove  (e) }\n    open fun propagateTouchEnd   (e: TouchEvent) { dispatcher.onTouchEnd   (e) }\n    open fun propagateTouchStart (e: TouchEvent) { dispatcher.onTouchStart (e) }\n    open fun propagateTouchCancel(e: TouchEvent) { dispatcher.onTouchCancel(e) }\n\n    open fun propagateOnMouseMove (me: MouseEvent) { dispatcher.onMouseMove (me) }\n    open fun propagateOnMouseDown (me: MouseEvent) { dispatcher.onMouseDown (me) }\n    open fun propagateOnMouseUp   (me: MouseEvent) { dispatcher.onMouseUp   (me) }\n    open fun propagateOnMouseEnter(me: MouseEvent) { dispatcher.onMouseEnter(me) }\n    open fun propagateOnMouseLeave(me: MouseEvent) { dispatcher.onMouseLeave(me) }\n\n    open fun propagateOnGotPointerCapture (pe: PointerEvent){ dispatcher.onGotPointerCapture (pe) }\n    open fun propagateOnLostPointerCapture(pe: PointerEvent){ dispatcher.onLostPointerCapture(pe) }\n    open fun propagateOnPointerDown       (pe: PointerEvent){ dispatcher.onPointerDown       (pe) }\n    open fun propagateOnPointerMove       (pe: PointerEvent){ dispatcher.onPointerMove       (pe) }\n    open fun propagateOnPointerUp         (pe: PointerEvent){ dispatcher.onPointerUp         (pe) }\n    open fun propagateOnPointerCancel     (pe: PointerEvent){ dispatcher.onPointerCancel     (pe) }\n    open fun propagateOnPointerOver       (pe: PointerEvent){ dispatcher.onPointerOver       (pe) }\n    open fun propagateOnPointerOut        (pe: PointerEvent){ dispatcher.onPointerOut        (pe) }\n    open fun propagateOnPointerEnter      (pe: PointerEvent){ dispatcher.onPointerEnter      (pe) }\n    open fun propagateOnPointerLeave      (pe: PointerEvent){ dispatcher.onPointerLeave      (pe) }\n\n    open fun propagateOnClick   (me: MouseEvent) { dispatcher.onClick   (me) }\n    open fun propagateOnDblClick(me: MouseEvent) { dispatcher.onDblClick(me) }\n\n    open fun propagateOnKeyDown  (ke: KeyboardEvent) { dispatcher.onKeyDown  (ke) }\n    open fun propagateOnKeyUp    (ke: KeyboardEvent) { dispatcher.onKeyUp    (ke) }\n    open fun propagateOnKeyPress (ke: KeyboardEvent) {\n        handleCommonKeys(ke)\n        dispatcher.onKeyPress (ke)\n    }\n\n    private fun handleCommonKeys(keyboardEvent: KeyboardEvent) {\n        when (keyboardEvent.code) {\n            \"KeyR\" -> togglePause()\n        }\n    }\n\n    private fun stopEventListeners() {\n        //TODO(\"Not yet implemented\")\n    }\n\n    private var turnsCounter: Long = 0\n    open fun gameLoop() {\n        if (!active) return\n\n        turnsCounter++\n        //val startedAtMillis = window.performance.now()\n\n        dispatcher.turn()\n\n        //val finishedAtMillis = window.performance.now()\n        //var nextRunIn = turnDurationMillis - (finishedAtMillis - startedAtMillis).toInt()\n        //if (nextRunIn < 0) nextRunIn = 0\n\n        //window.setTimeout(this::gameLoop, nextRunIn)\n    }\n\n    private var framesCounter: Long = 0\n    open fun paint(t: Double) {\n        if (!active) return\n\n        framesCounter++\n        renderer.paint()\n\n        window.requestAnimationFrame( this::paint )\n    }\n\n    fun finishGame() {\n        pause()\n        dispatcher.finishGame()\n    }\n\n}\n","package tga.gaming.engine.colors\n\ndata class Clr(val r: Int, val g: Int, val b: Int, val o: Int = 255){\n    fun toHexColorString(): String {\n        return \"#\" +\n                r.toString(16).padStart(2,'0') +\n                g.toString(16).padStart(2,'0') +\n                b.toString(16).padStart(2,'0') +\n                o.toString(16).padStart(2,'0')\n    }\n}\n\nfun linearGradient(c0: Clr, c1: Clr, n: Int): Array<String> {\n\n    val r0 = c0.r.toDouble()\n    val g0 = c0.g.toDouble()\n    val b0 = c0.b.toDouble()\n    val o0 = c0.o.toDouble()\n\n    val r1 = c1.r.toDouble()\n    val g1 = c1.g.toDouble()\n    val b1 = c1.b.toDouble()\n    val o1 = c1.o.toDouble()\n\n    val rDelta = r1 - r0\n    val gDelta = g1 - g0\n    val bDelta = b1 - b0\n    val oDelta = o1 - o0\n\n    val rStep = rDelta / n\n    val gStep = gDelta / n\n    val bStep = bDelta / n\n    val oStep = oDelta / n\n\n    val colors = Array(n+1) {i ->\n        when (i) {\n            0 -> c0.toHexColorString()\n            n -> c1.toHexColorString()\n            else -> Clr(\n                (r0 + rStep * i).toInt(),\n                (g0 + gStep * i).toInt(),\n                (b0 + bStep * i).toInt(),\n                (o0 + oStep * i).toInt(),\n            ).toHexColorString()\n        }\n\n    }\n    return colors\n}\n\nfun multiLinearGradient(c0: Clr, vararg points: Pair<Int, Clr>): Array<String> {\n    val colors = ArrayList<String>()\n    var prevEndColor = c0\n    for( (n, endColor) in points ) {\n        val startColor = prevEndColor\n        prevEndColor = endColor\n\n        val part = linearGradient(startColor, endColor, n)\n        for (i in 0 until (part.size-1)) colors.add(part[i])\n    }\n    return colors.toTypedArray()\n}\n",null,null,"package tga.gaming.engine\n\nimport kotlin.math.PI\n\nconst val PI2 = PI * 2\nconst val pi_3 = PI / 3.0\nconst val pi2_3 = 2.0 * (PI / 3.0)\nconst val pi4_3 = 4.0 * (PI / 3.0)\nconst val pi5_3 = 5.0 * (PI / 3.0)\n\nconst val  D30 =  PI / 6\nconst val mD30 = -PI / 6",null,"package tga.gaming.engine.dispatcher\n\nimport org.w3c.dom.TouchEvent\nimport org.w3c.dom.events.KeyboardEvent\nimport org.w3c.dom.events.MouseEvent\nimport org.w3c.dom.pointerevents.PointerEvent\nimport tga.gaming.engine.index.SquareIndex\nimport tga.gaming.engine.model.Actionable\nimport tga.gaming.engine.model.Moveable\nimport tga.gaming.engine.model.Obj\n\ninterface Dispatcher : GameTurner, GameObjects, EventsListener\n\nopen class ObjectsDispatcher(\n    override val index: SquareIndex\n) : Dispatcher {\n    override val objects: MutableSet<Obj> = HashSet()\n\n    override fun turn() {\n        doMove()\n        update2dIndex()\n        doAct()\n        removeDeletedObjects()\n        addNewObjects()\n\n        movedObjects.clear()\n        objectToAdd.clear()\n        objectToDel.clear()\n    }\n\n    private val movedObjects = ArrayList<Obj>()\n    private fun doMove() {\n        objects.forEach {\n            if (it is Moveable) {\n                val oldPosition = it.p.copy()\n                it.move()\n                if (it.p != oldPosition) movedObjects += it\n            }\n        }\n\n    }\n\n    private fun update2dIndex() {\n        if (movedObjects.isNotEmpty()) index.update(movedObjects)\n    }\n\n    private fun doAct() {\n        objects.forEach {\n            if (it is Actionable) it.act()\n        }\n    }\n\n    private fun removeDeletedObjects() {\n        if (objectToDel.isNotEmpty()) {\n            objects.removeAll(objectToDel)\n            index.remove(objectToDel)\n        }\n    }\n\n    private fun addNewObjects() {\n        if (objectToAdd.isNotEmpty()) {\n            objects.addAll(objectToAdd)\n            objectToAdd.forEach { it.dispatcher = this }\n            index.update(objectToAdd)\n        }\n    }\n\n    private val objectToAdd = ArrayList<Obj>()\n    override fun <T: Obj> addObj(obj: T): T {\n        objectToAdd.add(obj)\n        return obj\n    }\n\n    private val objectToDel = HashSet<Obj>()\n    override fun <T: Obj> delObj(obj: T): T {\n        objectToDel.add(obj)\n        return obj\n    }\n\n    override fun <T : Obj> addObjs(vararg objs: T) = objs.forEach(this::addObj)\n\n    override fun beforeRun() {\n        addNewObjects()\n        objectToAdd.clear()\n    }\n\n    override fun finishGame() {\n        objects.clear()\n        index.reset()\n    }\n\n    override fun onTouchMove  (te: TouchEvent){ objects.forEach { if (it is EventsListener) it.onTouchMove  (te) } }\n    override fun onTouchEnd   (te: TouchEvent){ objects.forEach { if (it is EventsListener) it.onTouchEnd   (te) } }\n    override fun onTouchStart (te: TouchEvent){ objects.forEach { if (it is EventsListener) it.onTouchStart (te) } }\n    override fun onTouchCancel(te: TouchEvent){ objects.forEach { if (it is EventsListener) it.onTouchCancel(te) } }\n\n\n    override fun onMouseMove (me: MouseEvent){ objects.forEach { if (it is EventsListener) it.onMouseMove (me) } }\n    override fun onMouseDown (me: MouseEvent){ objects.forEach { if (it is EventsListener) it.onMouseDown (me) } }\n    override fun onMouseUp   (me: MouseEvent){ objects.forEach { if (it is EventsListener) it.onMouseUp   (me) } }\n    override fun onMouseEnter(me: MouseEvent){ objects.forEach { if (it is EventsListener) it.onMouseEnter(me) } }\n    override fun onMouseLeave(me: MouseEvent){ objects.forEach { if (it is EventsListener) it.onMouseLeave(me) } }\n\n    override fun onGotPointerCapture (pe: PointerEvent){ objects.forEach { if (it is EventsListener) it.onGotPointerCapture(pe) } }\n    override fun onLostPointerCapture(pe: PointerEvent){ objects.forEach { if (it is EventsListener) it.onLostPointerCapture(pe) } }\n    override fun onPointerDown       (pe: PointerEvent){ objects.forEach { if (it is EventsListener) it.onPointerDown(pe) } }\n    override fun onPointerMove       (pe: PointerEvent){ objects.forEach { if (it is EventsListener) it.onPointerMove(pe) } }\n    override fun onPointerUp         (pe: PointerEvent){ objects.forEach { if (it is EventsListener) it.onPointerUp(pe) } }\n    override fun onPointerCancel     (pe: PointerEvent){ objects.forEach { if (it is EventsListener) it.onPointerCancel(pe) } }\n    override fun onPointerOver       (pe: PointerEvent){ objects.forEach { if (it is EventsListener) it.onPointerOver(pe) } }\n    override fun onPointerOut        (pe: PointerEvent){ objects.forEach { if (it is EventsListener) it.onPointerOut(pe) } }\n    override fun onPointerEnter      (pe: PointerEvent){ objects.forEach { if (it is EventsListener) it.onPointerEnter(pe) } }\n    override fun onPointerLeave      (pe: PointerEvent){ objects.forEach { if (it is EventsListener) it.onPointerLeave(pe) } }\n\n    override fun onClick   (me: MouseEvent){ objects.forEach { if (it is EventsListener) it.onClick   (me) } }\n    override fun onDblClick(me: MouseEvent){ objects.forEach { if (it is EventsListener) it.onDblClick(me) } }\n\n    override fun onKeyPress(ke: KeyboardEvent) { objects.forEach { if (it is EventsListener) it.onKeyPress(ke) } }\n    override fun onKeyDown (ke: KeyboardEvent) { objects.forEach { if (it is EventsListener) it.onKeyDown (ke) } }\n    override fun onKeyUp   (ke: KeyboardEvent) { objects.forEach { if (it is EventsListener) it.onKeyUp   (ke) } }\n\n\n\n}\n\n\n","package tga.gaming.engine.drawers\n\nimport org.w3c.dom.CanvasRenderingContext2D\nimport tga.gaming.engine.PI2\nimport tga.gaming.engine.model.CompositeDrawer\nimport tga.gaming.engine.model.Drawer\nimport tga.gaming.engine.model.Obj\n\nclass CircleDrawer(\n    override val obj: Obj,\n    private val radius: Double,\n    private val strokeStyle: String,\n    private val lineWidth: Double = 1.0,\n    private val fillStyle: String? = null\n) : Drawer {\n    override fun draw(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath()\n        ctx.strokeStyle = strokeStyle\n        ctx.lineWidth = lineWidth\n        ctx.arc(0.0, 0.0, radius, 0.0, PI2)\n        fillStyle?.let{\n            ctx.fillStyle = fillStyle\n            ctx.fill()\n        }\n        ctx.stroke()\n    }\n}\n\ninline fun <reified T : CompositeDrawer> T.withCircleDrawer(\n    radius: Double,\n    strokeStyle: String = \"aquamarine\",\n    lineWidth: Double = 1.0,\n    fillStyle: String? = null\n): T {\n    this.drawers.add(CircleDrawer(this as Obj, radius, strokeStyle, lineWidth, fillStyle))\n    return this\n}\n\ninline fun <reified T : CompositeDrawer> T.withCircleDrawer(\n    radius: Int,\n    strokeStyle: String = \"aquamarine\",\n    lineWidth: Double = 1.0,\n    fillStyle: String? = null\n): T {\n    return withCircleDrawer(radius.toDouble(), strokeStyle, lineWidth, fillStyle)\n}\n","package tga.gaming.engine.drawers\n\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.Image\nimport tga.gaming.engine.model.CompositeDrawer\nimport tga.gaming.engine.model.Drawer\nimport tga.gaming.engine.model.Obj\n\nclass ImagesDrawer(\n    override val obj: Obj,\n    var imageIndex: Int,\n    private val images: List<Image>\n) : Drawer {\n\n    fun nextImage() {\n        imageIndex += 1\n        if (imageIndex == images.size) imageIndex = 0\n    }\n\n    override fun draw(ctx: CanvasRenderingContext2D) {\n        val f = obj.frame ?: return\n\n        val image = when {\n            imageIndex < 0            -> images.first()\n            imageIndex >= images.size -> images.last()\n            else -> images[imageIndex]\n        }\n\n        ctx.drawImage(image, f.p0.x, f.p0.y, f.width, f.height)\n    }\n\n}\n\nfun CompositeDrawer.withImageDrawer(img: Image): ImagesDrawer {\n    return withImagesDrawer(listOf(img))\n}\n\nfun CompositeDrawer.withImagesDrawer(images: List<Image>, imageIndex: Int = 0): ImagesDrawer {\n    val imagesDrawer = ImagesDrawer(\n        obj = this as Obj,\n        imageIndex = imageIndex,\n        images = images\n    )\n\n    this.drawers.add(imagesDrawer)\n\n    return imagesDrawer\n}\n","package tga.gaming.engine.image\n\nimport kotlinx.browser.window\nimport org.w3c.dom.Image\n\nval imagesCache = HashMap<String, Image>()\n\nfun loadImage(path: String): Image {\n    var image: Image? = imagesCache[path]\n    if (image != null) return image\n\n    image = window.document.createElement(\"img\") as Image\n    image.src = path\n\n    imagesCache[path] = image\n    return image\n}\n\nfun loadImages(imgSrcTemplate: String, numberOfImages: Int): List<Image> {\n    return List(numberOfImages) {\n        loadImage(imgSrcTemplate.replaceFirst(Regex(\"<n>\"), \"$it\"))\n    }\n}\n\n",null,null,null,"package tga.gaming.engine.index\n\nimport tga.gaming.engine.model.Frame\nimport tga.gaming.engine.model.Obj\nimport tga.gaming.engine.model.Vector\n\nprivate const val sizeFactor: Int    = 6           // square size == 64\nconst val gridStep  : Int    = (1 shl sizeFactor)  // 64\nconst val gridStepD : Double = gridStep.toDouble() // 64.0\n\nclass ObjectsSquareIndex(\n    wordSize: Vector\n) : SquareIndex {\n\n    override val lines  : Int = wordSize.y.toInt() shr sizeFactor\n    override val columns: Int = wordSize.x.toInt() shr sizeFactor\n    override val matrix = Array<Array<MutableSet<Obj>>>(lines){ Array(columns) { HashSet() } }\n\n    private val maxLinesIndex = lines - 1\n    private val maxColumnsIndex = columns - 1\n\n    private val positionsRangeByObj: MutableMap<Obj, PositionsRange2D> = HashMap()\n\n    override fun update(obj: Obj) {\n        val prev: PositionsRange2D? = positionsRangeByObj[obj]\n        val curr: PositionsRange2D? = rangeOfObject(obj.p, obj.frame)\n\n        if ( prev == curr ) return\n        if ( curr == null) { remove(obj); return }\n\n        prev?.forEachExcept(curr) { it.remove(obj) }\n        curr.forEachExcept(prev) { it.add(obj) }\n\n        positionsRangeByObj[obj] = curr\n    }\n\n    override fun remove(obj: Obj) {\n        val prev: PositionsRange2D? = positionsRangeByObj[obj]\n        prev?.forEach { it.remove(obj) }\n    }\n\n    override fun reset() {\n        PositionsRange2D(0,0, lines-1, columns-1).forEach { cell -> cell.clear() }\n    }\n\n    override fun objectsOnTheSamePlaceWith(obj: Obj): Sequence<Obj> {\n        val positionsRange = positionsRangeByObj[obj] ?: return emptySequence()\n\n        val objects = HashSet<Obj>()\n        positionsRange.forEach {\n            objects.addAll(it)\n        }\n\n        return objects.asSequence().filter { it !== obj }\n    }\n\n    private fun PositionsRange2D.forEachExcept(except: PositionsRange2D?, body: (MutableSet<Obj>) -> Unit) {\n        if (except == null) {\n            this.forEach(body)\n            return\n        }\n\n        for (l in lin0 .. lin1) {\n            val lin = matrix[l]\n            for (c in col0..col1) {\n                if ( !(l in except.lin0..except.lin1 && c in except.col0..except.col1) ) {\n                    body(lin[c])\n                }\n            }\n        }\n\n    }\n\n    private fun PositionsRange2D.forEach(body: (MutableSet<Obj>) -> Unit) {\n        for (l in lin0 .. lin1) {\n            val line = matrix[l]\n            for (c in col0..col1)\n                body(line[c])\n        }\n\n    }\n\n    private fun rangeOfObject(position: Vector, frame: Frame?): PositionsRange2D? {\n        if (frame == null) return null\n\n        val y0 = (position.y + frame.p0.y)\n        val x0 = (position.x + frame.p0.x)\n        val y1 = (position.y + frame.p1.y)\n        val x1 = (position.x + frame.p1.x)\n\n        var l0 = y0.toInt() shr sizeFactor\n        var c0 = x0.toInt() shr sizeFactor\n        var l1 = y1.toInt() shr sizeFactor\n        var c1 = x1.toInt() shr sizeFactor\n\n        if ((l0<0 && l1<0) || (l0>=lines   && l1>=lines  )) return null\n        if ((c0<0 && c1<0) || (c0>=columns && c1>=columns)) return null\n\n        if (l0<0) l0 = 0; if (l0>=lines) l0 = maxLinesIndex\n        if (l1<0) l1 = 0; if (l1>=lines) l1 = maxLinesIndex\n\n        if (c0<0) c0 = 0; if (c0>=columns) c0 = maxColumnsIndex\n        if (c1<0) c1 = 0; if (c1>=columns) c1 = maxColumnsIndex\n\n        return PositionsRange2D(lin0 = l0, col0 = c0, lin1 = l1, col1 = c1 )\n    }\n\n}\n\ndata class PositionsRange2D(\n    val lin0: Int,\n    val col0: Int,\n    val lin1: Int,\n    val col1: Int\n)\n","package tga.gaming.engine.internal\n\nobject IdSequence {\n\n    private var currentId: Long = 0L\n\n    fun next(): Long {\n        return ++currentId\n    }\n}\n","package tga.gaming.engine.model\n\nimport tga.gaming.engine.dispatcher.GameObjects\nimport tga.gaming.engine.internal.IdSequence\n\nopen class Obj(\n    open val p: Vector = Vector(),\n    open var angle: Double = 0.0,\n    open var scale: Double = 1.0,\n    open var r: Double = 10.0,\n    open val frame: Frame? = Frame( v(-r,-r), v(r,r)),\n) {\n    val id: Long = IdSequence.next()\n    lateinit var dispatcher: GameObjects\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is Obj) return false\n        if (id != other.id) return false\n        return true\n    }\n\n    override fun hashCode(): Int {\n        return id.hashCode()\n    }\n}\n\n","package tga.gaming.engine.model\n\nimport kotlin.math.*\nimport kotlin.random.Random.Default.nextDouble\n\n\ndata class Vector(\n    var x: Double = 0.0,\n    var y: Double = 0.0\n) {\n    private var cachedLen :Double? = null\n\n    var len: Double\n        get() {\n            if (cachedLen == null) calculateLength()\n            return cachedLen!!\n        }\n        set(value) {\n            assignLength(value)\n        }\n\n    operator fun plusAssign(n: Int   ) { x+=n;   y+=n  ; cachedLen = null; }\n    operator fun plusAssign(n: Double) { x+=n;   y+=n  ; cachedLen = null; }\n    operator fun plusAssign(v: Vector) { x+=v.x; y+=v.y; cachedLen = null; }\n\n    operator fun minusAssign(n: Int   ) { x-=n;   y-=n  ; cachedLen = null; }\n    operator fun minusAssign(n: Double) { x-=n;   y-=n  ; cachedLen = null; }\n    operator fun minusAssign(v: Vector) { x-=v.x; y-=v.y; cachedLen = null; }\n\n    operator fun timesAssign(n: Int)    { x*=n;   y*=n  ; if (cachedLen != null) cachedLen = cachedLen!! * n; }\n    operator fun timesAssign(n: Double) { x*=n;   y*=n  ; if (cachedLen != null) cachedLen = cachedLen!! * n; }\n\n    operator fun plus(n: Int   ) = Vector(x+n,   y+n)\n    operator fun plus(n: Double) = Vector(x+n,   y+n)\n    operator fun plus(v: Vector) = Vector(x+v.x, y+v.y)\n\n    operator fun minus(n: Int   ) = Vector(x-n,   y-n)\n    operator fun minus(n: Double) = Vector(x-n,   y-n)\n    operator fun minus(v: Vector) = Vector(x-v.x, y-v.y)\n\n    operator fun times(n: Int   ) = Vector(x*n,   y*n)\n    operator fun times(n: Double) = Vector(x*n,   y*n)\n    operator fun times(v: Vector) = Vector(x*v.x, y*v.y)\n\n    operator fun div(n: Int   ) = Vector(x/n, y/n)\n    operator fun div(n: Double) = Vector(x/n, y/n)\n\n    fun set(x: Double, y: Double) { this.x=  x; this.y =   y; cachedLen = null; }\n    fun set(v: Vector           ) { this.x=v.x; this.y = v.y; cachedLen = null; }\n\n    /**\n     * restore angle by vector v, only for len(v) = 1\n     */\n    fun angle(): Double {\n\n        return when {\n            (x == 0.0) -> if (y > 0) angle_90 else angle_270\n            (y == 0.0) -> if (x > 0) angle_0  else angle_180\n            (y > 0) -> acos(x)\n            else -> angle_180 + acos(-x)\n        }\n    }\n\n    fun assignLength(desiredLength: Double): Vector {\n        cachedLen = null\n        when {\n            (x == 0.0) -> y = if (y >= 0) desiredLength else -desiredLength\n            (y == 0.0) -> x = if (x >= 0) desiredLength else -desiredLength\n            else -> {\n                val k = desiredLength / len\n                x *= k\n                y *= k\n            }\n        }\n        cachedLen = desiredLength\n        return this\n    }\n\n    private fun calculateLength() {\n        cachedLen = when {\n            (x == 0.0) -> y\n            (y == 0.0) -> x\n            else -> sqrt(x*x + y*y)\n        }\n    }\n\n    fun norm(quite: Boolean = false): Vector {\n        return this.copy().normalizeThis(quite)\n    }\n\n    fun normalizeThis(quite: Boolean = false): Vector {\n        if (x == 0.0 && y == 0.0) {\n            if (quite) return this else throw ZeroLengthVector(\"A zero vector cannot be normalized\")\n        }\n        when {\n            (x == 0.0) -> y = if (y > 0) 1.0 else -1.0\n            (y == 0.0) -> x = if (x > 0) 1.0 else -1.0\n            else -> {\n                val l = len\n                x /= l\n                y /= l\n            }\n        }\n        cachedLen = 1.0\n        return this\n    }\n\n    fun setToAngle(angle: Double) {\n        x = cos(angle)\n        y = sin(angle)\n    }\n\n    companion object {\n        const val angle_0  : Double =  0.0\n        const val angle_90 : Double =  PI / 2\n        const val angle_180: Double =  PI\n        const val angle_270: Double =  PI/2 * 3\n    }\n\n}\n\nfun v()                     = Vector()\nfun v(x: Double, y: Double) = Vector(x, y)\nfun v(x: Float,  y: Float)  = Vector(x.toDouble(), y.toDouble())\nfun v(x: Long,   y: Long)   = Vector(x.toDouble(), y.toDouble())\nfun v(x: Int,    y: Int)    = Vector(x.toDouble(), y.toDouble())\nfun v(x: Int,    y: Double) = Vector(x.toDouble(), y)\nfun v(x: Int,    y: Float)  = Vector(x.toDouble(), y.toDouble())\nfun v(x: Int,    y: Long)   = Vector(x.toDouble(), y.toDouble())\nfun v(x: Double, y: Int)    = Vector(x,            y.toDouble())\nfun v(x: Float,  y: Int)    = Vector(x.toDouble(), y.toDouble())\nfun v(x: Long,   y: Int)    = Vector(x.toDouble(), y.toDouble())\nfun randomNormVector() = v(nextDouble(-1.0, 1.0), nextDouble(-1.0, 1.0)).normalizeThis()\nfun normVectorOfAngle(angle: Double):Vector = v(cos(angle), sin(angle))\n\nval vUp        = v(0,-1)\nval vUpRight   = v(1,-1).norm()\nval vRight     = v(1,0)\nval vDownRight = v(1,1).norm()\nval vDown      = v(0,1)\nval vDownLeft  = v(-1,1).norm()\nval vLeft      = v(-1,0)\nval vUpLeft    = v(-1,-1).norm()\n\ndata class Frame(\n    val p0: Vector,\n    val p1: Vector\n) {\n    val width: Double = p1.x - p0.x\n    val height: Double = p1.y - p0.y\n    //val center = (p1 - p0) / 2\n\n    companion object {\n        fun square(size: Double): Frame {\n            val r = size/2\n            return Frame( v(-r,-r), v(r,r) )\n        }\n    }\n}\n\nfun Vector.restrictWithFrame(bounds: Frame){\n    if      (x > bounds.p1.x) x = bounds.p1.x\n    else if (x < bounds.p0.x) x = bounds.p0.x\n    if      (y > bounds.p1.y) y = bounds.p1.y\n    else if (y < bounds.p0.y) y = bounds.p0.y\n}\n\n\n","package tga.gaming.engine.model\n\nclass ZeroLengthVector(message: String? = null, cause: Throwable? = null) : RuntimeException(message, cause)\n","package tga.gaming.engine.movers\n\nimport org.w3c.dom.CanvasRenderingContext2D\nimport tga.gaming.engine.PI2\nimport tga.gaming.engine.model.*\nimport kotlin.math.PI\n\nfun CompositeMover.addConstantSpeedMover(\n    speed: Double = 1.0,\n    rotationSpeed: Double = PI / 180,\n    bounds: Frame,\n    targetFunction: VectorFunction\n): ConstantSpeedMover {\n    val mover = ConstantSpeedMover(this as Obj, speed, rotationSpeed, bounds, targetFunction)\n    this.movers.add(mover)\n    return mover\n}\n\ninline fun <reified T: CompositeMover> T.withConstantSpeedMover(\n    speed: Double = 1.0,\n    rotationSpeed: Double = PI / 180,\n    bounds: Frame,\n    noinline targetFunction: VectorFunction\n): T {\n    val mover = ConstantSpeedMover(this as Obj, speed, rotationSpeed, bounds, targetFunction)\n    this.movers.add(mover)\n    return this\n}\n\nclass ConstantSpeedMover(\n    override val obj: Obj,\n    private val speed: Double = 1.0,\n    private val rotationSpeed: Double = PI / 180,\n    val bounds: Frame,\n    val targetFunction: VectorFunction\n): Mover {\n\n    var prevTarget: Vector? = null\n\n    private var isRotationComplete: Boolean = true\n    private var desiredDirectionVector = v(0,1)\n    private var speedVector: Vector = desiredDirectionVector * speed\n\n    private var desiredSpeedAngle: Double = 0.0\n    private var turnDirection = \"no\"\n    private var va  = 0.0\n    private var currSpeedAngle = 0.0\n    private var desiredLeftTurn = 0.0\n    private var desiredRightTurn = 0.0\n\n\n    override fun move() {\n        val target = targetFunction()\n        target?.let{ rotateToTarget(it) }\n        obj.p += speedVector\n        obj.p.restrictWithFrame(bounds)\n    }\n\n    private fun rotateToTarget(target: Vector) {\n        if (prevTarget != target) { isRotationComplete = false }\n        if (isRotationComplete) return\n        prevTarget = target.copy()\n        desiredDirectionVector = (target - obj.p).norm()\n\n\n        desiredSpeedAngle = desiredDirectionVector.angle()\n        currSpeedAngle = speedVector.norm().angle()\n\n        if (desiredSpeedAngle < currSpeedAngle) desiredSpeedAngle += PI2\n\n        desiredLeftTurn = desiredSpeedAngle - currSpeedAngle\n        desiredRightTurn = PI2 - desiredLeftTurn\n\n        if (desiredLeftTurn <= desiredRightTurn) {\n            // turn to the left\n            turnDirection = \"left\"\n            if ( desiredLeftTurn <= rotationSpeed )  { speedVector.set(desiredDirectionVector); isRotationComplete = true}\n            else                                     { va = currSpeedAngle + rotationSpeed; speedVector.setToAngle(va) }\n        } else {\n            // turn to the right\n            turnDirection = \"right\"\n            if ( desiredRightTurn <= rotationSpeed ) { speedVector.set(desiredDirectionVector); isRotationComplete = true}\n            else                                     { va = currSpeedAngle - rotationSpeed; speedVector.setToAngle(va) }\n\n        }\n        speedVector.timesAssign(speed)\n    }\n\n    private fun Double.asDegree() = \"${(this / PI2 * 360).toInt()}\"\n\n    fun draw(ctx: CanvasRenderingContext2D) {\n        ctx.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)\n        //ctx.translate(obj.p.x, obj.p.y)\n        val aColor = if (isRotationComplete) \"grey\" else \"orange\"\n\n\n        prevTarget?.let{\n            ctx.beginPath()\n            ctx.strokeStyle = \"red\"\n            ctx.arc(it.x, it.y, 7.0, 0.0, PI2)\n            ctx.lineWidth = 1.5\n            ctx.stroke()\n            ctx.fill()\n            ctx.beginPath()\n            ctx.lineWidth = 1.0\n            ctx.strokeText(desiredSpeedAngle.asDegree(), it.x + 10, it.y)\n            ctx.strokeText(turnDirection, it.x + 10, it.y+20)\n            ctx.strokeText(va.asDegree(), it.x + 10, it.y+40)\n\n        }\n\n\n        ctx.beginPath()\n        ctx.moveTo(obj.p.x, obj.p.y)\n        val dV = desiredDirectionVector.norm() * 50\n        ctx.lineTo(obj.p.x + dV.x, obj.p.y + dV.y)\n        ctx.strokeStyle = aColor\n        ctx.fillStyle = aColor\n        ctx.stroke()\n        ctx.beginPath()\n        ctx.arc(obj.p.x, obj.p.y, 3.0, 0.0, PI2)\n        ctx.fill()\n\n        ctx.beginPath()\n        ctx.moveTo(obj.p.x, obj.p.y)\n        val dS = speedVector.norm() * 40\n        ctx.lineTo(obj.p.x + dS.x, obj.p.y + dS.y)\n        ctx.strokeStyle = \"yellow\"\n        ctx.fillStyle = \"yellow\"\n        ctx.stroke()\n        ctx.strokeText(currSpeedAngle.asDegree(), obj.p.x+20, obj.p.y)\n\n        ctx.strokeStyle = \"lightblue\"\n        ctx.strokeText(\"left: ${desiredLeftTurn.asDegree()}\", obj.p.x+20, obj.p.y+25)\n        ctx.strokeText(\"right:${desiredRightTurn.asDegree()}\", obj.p.x+20, obj.p.y+50)\n    }\n}","package tga.gaming.engine.movers\n\nimport org.w3c.dom.events.KeyboardEvent\nimport tga.gaming.engine.model.*\n\nfun CompositeMover.addKeyboardAwsdMover(maxSpeed: Double = 2.0, bounds: Frame): KeyboardArrowsMover {\n    val mover = KeyboardArrowsMover(this as Obj, maxSpeed, bounds)\n    this.movers.add(mover)\n    return mover\n}\ninline fun <reified T: CompositeMover> T.withKeyboardAwsdMover(maxSpeed: Double = 2.0, bounds: Frame): T {\n    val mover = KeyboardArrowsMover(this as Obj, maxSpeed, bounds)\n    this.movers.add(mover)\n    return this\n}\n\nfun CompositeMover.addKeyboardArrowsMover(maxSpeed: Double = 2.0, bounds: Frame): KeyboardArrowsMover {\n    val mover = KeyboardArrowsMover(this as Obj, maxSpeed, bounds,\n        keyUp    = \"BracketLeft\",\n        keyRight = \"Backslash\",\n        keyDown  = \"Quote\",\n        keyLeft  = \"Semicolon\"\n    )\n    this.movers.add(mover)\n    return mover\n}\n\ninline fun <reified T: CompositeMover> T.withKeyboardArrowsMoverAWSD(maxSpeed: Double = 2.0, bounds: Frame): T {\n    val mover = KeyboardArrowsMover(this as Obj, maxSpeed, bounds,\n        keyUp    = \"BracketLeft\",\n        keyRight = \"Backslash\",\n        keyDown  = \"Quote\",\n        keyLeft  = \"Semicolon\"\n    )\n    this.movers.add(mover)\n    return this\n}\n\nopen class KeyboardArrowsMover(\n    override val obj: Obj,\n    private val maxSpeed: Double = 1.0,\n    private val bounds: Frame,\n    private val keyUp   : String = \"KeyW\",\n    private val keyRight: String = \"KeyD\",\n    private val keyDown : String = \"KeyS\",\n    private val keyLeft : String = \"KeyA\"\n) : Mover {\n\n\n    private var speed: Vector? = null\n\n    private var isUpKeyPressed    = false\n    private var isRightKeyPressed = false\n    private var isDownKeyPressed  = false\n    private var isLeftKeyPressed  = false\n\n    fun onKeyDown(ke: KeyboardEvent) {\n        when (ke.code) {\n            keyUp    -> if (!isUpKeyPressed )   { isUpKeyPressed    = true; updateSpeed() }\n            keyRight -> if (!isRightKeyPressed) { isRightKeyPressed = true; updateSpeed() }\n            keyDown  -> if (!isDownKeyPressed ) { isDownKeyPressed  = true; updateSpeed() }\n            keyLeft  -> if (!isLeftKeyPressed ) { isLeftKeyPressed  = true; updateSpeed() }\n        }\n    }\n\n    fun onKeyUp(ke: KeyboardEvent) {\n        when (ke.code) {\n            keyUp    -> if (isUpKeyPressed)    { isUpKeyPressed    = false; updateSpeed() }\n            keyRight -> if (isRightKeyPressed) { isRightKeyPressed = false; updateSpeed() }\n            keyDown  -> if (isDownKeyPressed)  { isDownKeyPressed  = false; updateSpeed() }\n            keyLeft  -> if (isLeftKeyPressed)  { isLeftKeyPressed  = false; updateSpeed() }\n        }\n    }\n\n    private fun updateSpeed() {\n        val dx: Int = when {\n            isRightKeyPressed == isLeftKeyPressed -> 0\n            isRightKeyPressed                     -> 1\n            isLeftKeyPressed                      -> -1\n            else                                  -> 0\n        }\n\n        val dy: Int = when {\n            isUpKeyPressed == isDownKeyPressed -> 0\n            isDownKeyPressed                   -> 1\n            isUpKeyPressed                     -> -1\n            else                               -> 0\n        }\n\n        when {\n            dx ==  0 && dy ==  0 -> speed = null\n            dx ==  0 && dy == -1 -> speed = vUp        * maxSpeed\n            dx ==  1 && dy == -1 -> speed = vUpRight   * maxSpeed\n            dx ==  1 && dy ==  0 -> speed = vRight     * maxSpeed\n            dx ==  1 && dy ==  1 -> speed = vDownRight * maxSpeed\n            dx ==  0 && dy ==  1 -> speed = vDown      * maxSpeed\n            dx == -1 && dy ==  1 -> speed = vDownLeft  * maxSpeed\n            dx == -1 && dy ==  0 -> speed = vLeft      * maxSpeed\n            dx == -1 && dy == -1 -> speed = vUpLeft    * maxSpeed\n        }\n    }\n\n\n    override fun move() {\n        if (speed != null) {\n            val p = obj.p\n            p += speed!!\n            p.restrictWithFrame(bounds)\n        }\n    }\n\n}","package tga.gaming.engine.render\n\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.HTMLCanvasElement\nimport tga.gaming.engine.dispatcher.GameObjects\nimport tga.gaming.engine.model.Drawable\n\nclass HtmlCanvas2dRenderer(\n    val canvas: HTMLCanvasElement,\n    val gameObjects: GameObjects\n) : GameRenderer {\n\n    val ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\")!! as CanvasRenderingContext2D\n    val width = canvas.width\n    val height = canvas.height\n\n    override fun paint() {\n        canvas.width = canvas.width\n\n        gameObjects.objects.forEach {\n            if (it is Drawable) {\n                ctx.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)\n                ctx.lineWidth = 1.0\n                ctx.translate(it.p.x, it.p.y)\n                if (it.scale != 1.0) ctx.scale(it.scale, it.scale)\n                if (it.angle != 0.0) ctx.rotate(it.angle)\n                it.draw(ctx)\n            }\n        }\n\n        ctx.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)\n    }\n}\n","package tga.gaming.engine.shapes\n\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.CanvasTextBaseline\nimport org.w3c.dom.TOP\nimport tga.gaming.engine.GameWord\nimport tga.gaming.engine.index.gridStepD\nimport tga.gaming.engine.model.Drawable\nimport tga.gaming.engine.model.Obj\n\n\nfun GameWord.withIndexGrid(\n    colorPassive: String = \"#443c38\",\n    colorActive: String = \"#886134\"\n): IndexGrid {\n    return dispatcher.addObj(IndexGrid(colorPassive, colorActive))\n}\n\nclass IndexGrid(\n    val colorPassive: String,\n    val colorActive: String\n) : Obj(frame = null), Drawable {\n\n    override fun draw(ctx: CanvasRenderingContext2D) {\n\n        val index = this.dispatcher.index\n        val size = gridStepD\n        var y = 0.0\n        for (l in 0 until index.lines) {\n            var x = 0.0\n            for (c in 0 until index.columns) {\n                ctx.beginPath()\n                val count = index.matrix[l][c].size\n                ctx.strokeStyle = if ( count > 0) colorActive else colorPassive\n                val x0 = x+2\n                val y0 = y+2\n\n                ctx.lineWidth = 0.5\n                ctx.strokeText(\"$count\",x0+3,y0+3)\n                ctx.textBaseline = CanvasTextBaseline.TOP\n                ctx.lineWidth = 2.0\n                ctx.rect(x0,y0, size-4,size-4)\n                ctx.stroke()\n                x += size\n            }\n            y += size\n        }\n\n\n    }\n}\n","package tga.gaming.engine.shapes\n\nimport org.w3c.dom.TouchEvent\nimport org.w3c.dom.events.MouseEvent\nimport tga.gaming.engine.GameWord\nimport tga.gaming.engine.dispatcher.SimpleEventsListener\nimport tga.gaming.engine.drawers.withCircleDrawer\nimport tga.gaming.engine.model.*\n\nfun GameWord.withPointer(indicate: Boolean = false, initPos: Vector? = null): Pointer {\n    val pointer = Pointer(indicate, initPos)\n    dispatcher.addObj(pointer)\n    return pointer\n}\n\nclass Pointer(indicate: Boolean = false, initPos: Vector? = null) : Obj(r = 0.0), Moveable, SimpleEventsListener, CompositeDrawer {\n\n    override val drawers = mutableListOf<Drawer>()\n\n    var externalPointerCoordinates : Vector? = null\n        private set\n    private var externalPointerWasMoved = false\n\n    init {\n        if (indicate) withCircleDrawer(radius = 10)\n        initPos?.let {\n            p.set(it.x, it.y)\n        }\n    }\n\n    override fun move() {\n        if (externalPointerWasMoved) {\n            externalPointerCoordinates?.let{\n                p.set(it)\n            }\n            externalPointerWasMoved = false\n        }\n    }\n\n    override fun onTouchMove  (te: TouchEvent) { te.touches.item(0)?.let{ movementProcess(it.clientX.toDouble(), it.clientY.toDouble()) }}\n    override fun onTouchEnd   (te: TouchEvent) { movementFinish() }\n    override fun onTouchStart (te: TouchEvent) { te.touches.item(0)?.let{ movementStart(it.clientX.toDouble(), it.clientY.toDouble()) }}\n    override fun onMouseMove  (me: MouseEvent) { movementProcess(me.x, me.y) }\n    override fun onMouseEnter (me: MouseEvent) { movementStart(me.x, me.y)  }\n    override fun onMouseLeave (me: MouseEvent) { movementFinish()  }\n\n    private fun movementProcess(x: Double, y: Double) {\n        if (externalPointerCoordinates == null) externalPointerCoordinates = v()\n        externalPointerCoordinates!!.set(x, y)\n        externalPointerWasMoved = true\n    }\n\n    fun movementStart(x: Double, y: Double) {\n        externalPointerCoordinates = v(x, y)\n        externalPointerWasMoved = true\n    }\n\n    fun movementFinish() {\n        if (externalPointerCoordinates != null) {\n            externalPointerCoordinates = null\n            externalPointerWasMoved = true\n        }\n    }\n\n}","package tga.gaming.games\n\nimport kotlinx.browser.document\nimport kotlinx.browser.window\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.Node\nimport tga.gaming.engine.GameWord\nimport tga.gaming.engine.index.gridStep\nimport tga.gaming.engine.model.v\nimport tga.gaming.games.balloons.BalloonsGame\nimport tga.gaming.games.wiggly_worm.WigglyWorm\nimport tga.gaming.games.zombie.ZombieGame\n\nvar game: GameWord? = null\nlateinit var canvas: HTMLCanvasElement\n\nfun main() {\n    window.onload = {\n        canvas  = document.body!!.initCanvas()\n\n        document.getElementById(\"link-game-ghost\")?.   addEventListener(\"click\", {switchGame(\"Ghosts\")    })\n        document.getElementById(\"link-game-balloons\")?.addEventListener(\"click\", {switchGame(\"Balloons\")  })\n        document.getElementById(\"link-game-wiggly\")?.  addEventListener(\"click\", {switchGame(\"WigglyWorm\")})\n\n        switchGame(\"WigglyWorm\")\n\n    }\n\n    window.onresize = { canvas.resizeToWindow() }\n\n}\n\nfun switchGame(gameName: String) {\n    game?.finishGame()\n    val size = v(canvas.width, canvas.height)\n    game = when(gameName) {\n        \"Ghosts\"   -> ZombieGame(canvas, size)\n        \"Balloons\" -> BalloonsGame(canvas, size)\n        \"WigglyWorm\" -> WigglyWorm(canvas, size)\n        else -> throw RuntimeException(\"unsupported game name!\")\n    }\n    game!!.startGame()\n}\n\nfun HTMLCanvasElement.resizeToWindow(){\n    width  = ((window.innerWidth -10) / gridStep) * gridStep\n    height = ((window.innerHeight-10) / gridStep) * gridStep\n}\n\nfun Node.initCanvas(): HTMLCanvasElement {\n    val canvas = document.createElement(\"canvas\") as HTMLCanvasElement\n    canvas.width  = window.innerWidth-20\n    canvas.height = window.innerHeight-20\n    appendChild(canvas)\n\n    return canvas\n}\n\n","package tga.gaming.games.zombie\n\nimport kotlinx.browser.window\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.events.MouseEvent\nimport tga.gaming.engine.GameWord\nimport tga.gaming.engine.dispatcher.Dispatcher\nimport tga.gaming.engine.dispatcher.ObjectsDispatcher\nimport tga.gaming.engine.index.ObjectsSquareIndex\nimport tga.gaming.engine.index.gridStep\nimport tga.gaming.engine.index.gridStepD\nimport tga.gaming.engine.model.Vector\nimport tga.gaming.engine.model.v\nimport tga.gaming.engine.render.HtmlCanvas2dRenderer\nimport tga.gaming.games.zombie.objects.Ghost\nimport tga.gaming.games.zombie.objects.KotlinSign\nimport tga.gaming.games.zombie.objects.playerObj\nimport kotlin.random.Random.Default.nextDouble\n\nclass ZombieGame(\n    canvas: HTMLCanvasElement,\n    val wordSize: Vector,\n    dsp: Dispatcher = ObjectsDispatcher(ObjectsSquareIndex(wordSize))\n): GameWord(\n    canvas = canvas,\n    dispatcher = dsp,\n    renderer = HtmlCanvas2dRenderer(canvas, dsp),\n    turnDurationMillis = 20\n) {\n\n    val t = gridStep * 3.5\n\n    private val player = playerObj(wordSize / 2, wordSize)\n\n    override fun startGame() {\n        //dispatcher.addObj(IndexGrid(\"#443c38\", \"#886134\"))\n\n        val d = gridStepD/2\n        dispatcher.addObj(\n            KotlinSign(\n                p = wordSize - v(d,d),\n                speed = 0.08,\n                r = (gridStepD / 2.0) / 2\n            )\n        )\n        dispatcher.addObj(player)\n\n        dispatcher.addObj( Ghost( v(0,0), player) )\n        dispatcher.addObj( Ghost( wordSize.copy(), player) )\n        dispatcher.addObj( Ghost( wordSize.copy(x = 0.0), player) )\n        dispatcher.addObj( Ghost( wordSize.copy(y = 0.0), player) )\n\n        super.startGame()\n\n        window.setInterval(timeout = 500, handler = this::ifPlay)\n    }\n\n    private fun ifPlay() {\n        if (player.visibility <= 0) {\n\n            player.imagesDrawer.nextImage()\n            if (player.imagesDrawer.imageIndex == 0) {\n                this.pause()\n            } else {\n                player.visibility = player.maxVisibility\n            }\n\n        } else {\n\n            if (nextDouble() < 0.1) {\n                dispatcher.addObj(\n                    KotlinSign(\n                        v(\n                            x = nextDouble(wordSize.x),\n                            y = nextDouble(wordSize.y)\n                        )\n                    )\n                )\n\n            }\n\n            if (this.dispatcher.objects.size < 1000) {\n                dispatcher.addObj(\n                    Ghost(\n                        v(\n                            x = nextDouble(wordSize.x),\n                            y = nextDouble(wordSize.y)\n                        ),\n                        player\n                    )\n                )\n            }\n        }\n\n    }\n\n    override fun propagateOnClick(me: MouseEvent) {\n        println(\"mouseEvent.button = ${me.button}\")\n        dispatcher.addObj( Ghost(v(me.x, me.y), player) )\n        super.propagateOnClick(me)\n    }\n}\n\n","package tga.gaming.games.balloons\n\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.events.MouseEvent\nimport tga.gaming.engine.GameWord\nimport tga.gaming.engine.PI2\nimport tga.gaming.engine.dispatcher.Dispatcher\nimport tga.gaming.engine.dispatcher.ObjectsDispatcher\nimport tga.gaming.engine.dispatcher.SimpleEventsListener\nimport tga.gaming.engine.index.ObjectsSquareIndex\nimport tga.gaming.engine.index.gridStepD\nimport tga.gaming.engine.model.*\nimport tga.gaming.engine.render.HtmlCanvas2dRenderer\nimport tga.gaming.engine.shapes.Pointer\nimport tga.gaming.engine.shapes.withIndexGrid\nimport tga.gaming.engine.shapes.withPointer\nimport kotlin.math.cos\nimport kotlin.math.sin\nimport kotlin.random.Random.Default.nextDouble\nimport kotlin.random.Random.Default.nextInt\n\nprivate const val show2dIndexGrid = false\nprivate const val surfaceCoefficient: Int = 1000\n\nprivate const val speedFixPart = 0.2\nprivate const val speedRandomPart = 1.2\n\nprivate const val mouseRotationSpeed = 0.020\nprivate const val mouseRotationRadius = 70.0\n\nprivate const val growSpeed: Double = 2.5\nprivate const val deGrowSpeed: Double = growSpeed / 2.0\nprivate const val maxR: Double = 60.0\n\n\nclass BalloonsGame(\n    canvas: HTMLCanvasElement,\n    private var wordSize: Vector,\n    dsp: Dispatcher = ObjectsDispatcher(ObjectsSquareIndex(wordSize))\n): GameWord(\n    canvas = canvas,\n    dispatcher = dsp,\n    renderer = HtmlCanvas2dRenderer(canvas, dsp),\n    turnDurationMillis = 20\n) {\n\n    override fun startGame() {\n        initObjects()\n        super.startGame()\n    }\n\n    private fun initObjects() {\n        if (show2dIndexGrid) withIndexGrid()\n\n        val pointer = withPointer()\n\n        dispatcher.addObj(\n            MagnifyingGlass(wordSize/2, r=gridStepD*1.5, pointer = pointer)\n        )\n\n        generateCircles( (wordSize.x * wordSize.y).toInt() / surfaceCoefficient )\n    }\n\n    private fun generateCircles(numberOfCircles: Int) {\n        val r = 5.0\n        val wholeWordSize = Frame( v(r,r), wordSize.copy() - v(r,r) )\n        val offset = v(gridStepD/2, gridStepD/2)\n        val dx = wordSize.x - gridStepD\n        val dy = wordSize.y - gridStepD\n        val colors = colorsArray[nextInt(colorsArray.size)]\n\n        for (i in 0..numberOfCircles) {\n            dispatcher.addObj(\n                Circle(\n                    p = v(nextDouble(dx), nextDouble(dy)) + offset,\n                    r = r,\n                    color = colors[ nextInt(colors.size) ],\n                    area = wholeWordSize,\n                    speedLength = speedFixPart + nextDouble(0.0, speedRandomPart)\n                )\n            )\n        }\n\n    }\n\n    companion object {\n        val colorsArray = arrayOf(\n            arrayOf(\"#FF5F5D\",\"#3F7C85\",\"#00CCBF\",\"#72F2EB\",\"#747E7E\"),\n            arrayOf(\"#012030\",\"#13678A\",\"#45C4B0\",\"#9AEBA3\",\"#DAFDBA\"),\n            arrayOf(\"#151F30\",\"#103778\",\"#0593A2\",\"#FF7A48\",\"#E3371E\"),\n            arrayOf(\"#105057\",\"#898C8B\",\"#FF81D0\",\"#400036\",\"#919151\"),\n            arrayOf(\"#146152\",\"#44803F\",\"#B4CF66\",\"#FFEC5C\",\"#FF5A33\"),\n            arrayOf(\"#662400\",\"#B33F00\",\"#FF6B1A\",\"#006663\",\"#00B3AD\"),\n        )\n    }\n}\n\nprivate class Circle(\n    p: Vector,\n    r: Double,\n    private val color: String,\n    private val area: Frame,\n    speedLength: Double,\n) : Obj(p = p, r = r), CompositeDrawer, Moveable, Actionable {\n\n    val minR = r\n    var speed = randomNormVector() * speedLength\n    var addSpeed: Vector? = null\n\n    override val drawers = mutableListOf<Drawer>()\n\n    override fun draw(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath()\n        ctx.fillStyle = color\n        ctx.arc(x = 0.0, y = 0.0, radius = r, startAngle = 0.0, endAngle =  PI2)\n        ctx.fill()\n\n        super.draw(ctx)\n    }\n\n    override fun move() {\n        p += speed\n        addSpeed?.let{ p += it }\n        if (p.x < area.p0.x && speed.x < 0) { speed.x = -speed.x; addSpeed?.let{it.x = -it.x} }\n        if (p.x > area.p1.x && speed.x > 0) { speed.x = -speed.x; addSpeed?.let{it.x = -it.x} }\n        if (p.y < area.p0.y && speed.y < 0) { speed.y = -speed.y; addSpeed?.let{it.y = -it.y} }\n        if (p.y > area.p1.y && speed.y > 0) { speed.y = -speed.y; addSpeed?.let{it.y = -it.y} }\n    }\n\n    override fun act() {\n        if (r > minR) r -= deGrowSpeed\n        if (r < minR) r = minR\n\n        if (addSpeed != null) {\n            addSpeed = if (addSpeed!!.len > 0.001) addSpeed!! * 0.99 else null\n        }\n    }\n}\n\n\nprivate class MagnifyingGlass(p: Vector, r: Double, val pointer: Pointer) : Obj(p = p, r = r),\n    Moveable, Actionable, SimpleEventsListener\n{\n    var t: Double = 0.0\n    override fun move() {\n        val position = pointer.externalPointerCoordinates ?: pointer.p\n        position.let {\n            t += mouseRotationSpeed\n            if (t > PI2) t -= PI2\n            val offset = v(sin(t), cos(t)) * mouseRotationRadius\n            p.set(it + offset)\n        }\n    }\n\n    override fun act() {\n        dispatcher.index.objectsOnTheSamePlaceWith(this).forEach {\n            if (it is Circle) {\n                val len = (it.p - p).len\n                if (len < r) {\n                    if (it.r < maxR) it.r += growSpeed\n                    if (it.r > maxR) it.r = maxR\n                }\n            }\n        }\n    }\n\n    override fun onClick(me: MouseEvent) {\n        dispatcher.index.objectsOnTheSamePlaceWith(this).forEach {\n            if (it is Circle) {\n                val len = (it.p - p).len\n                if (len < r) {\n                    it.addSpeed = it.speed.norm() * 9.0\n                }\n            }\n        }\n    }\n\n}\n","package tga.gaming.games.wiggly_worm\n\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.events.KeyboardEvent\nimport tga.gaming.engine.GameWord\nimport tga.gaming.engine.PI2\nimport tga.gaming.engine.dispatcher.Dispatcher\nimport tga.gaming.engine.dispatcher.GameObjects\nimport tga.gaming.engine.dispatcher.ObjectsDispatcher\nimport tga.gaming.engine.index.ObjectsSquareIndex\nimport tga.gaming.engine.model.*\nimport tga.gaming.engine.movers.KeyboardArrowsMover\nimport tga.gaming.engine.movers.addKeyboardAwsdMover\nimport tga.gaming.engine.movers.withConstantSpeedMover\nimport tga.gaming.engine.render.HtmlCanvas2dRenderer\nimport tga.gaming.engine.shapes.Pointer\nimport kotlin.math.PI\nimport kotlin.math.cos\nimport kotlin.math.sin\nimport kotlin.random.Random\n\n//const val d = PI/180\n\nprivate var showHiddenMagic = false\n\nvar ws: Vector = v(10,10)\nvar wArea: Frame = Frame(v(), v())\n\nclass WigglyWorm(\n    canvas: HTMLCanvasElement,\n    private val wordSize: Vector,\n    dsp: Dispatcher = ObjectsDispatcher(ObjectsSquareIndex(wordSize))\n): GameWord(\n    canvas = canvas,\n    dispatcher = dsp,\n    renderer = HtmlCanvas2dRenderer(canvas, dsp),\n    turnDurationMillis = 20\n) {\n\n    private lateinit var pointer: Pointer\n\n    private val snakeSpeed = 1.5\n    private val snakeRotationSpeed = PI / 180 * 3\n\n    init {\n        ws = wordSize\n        wArea = Frame(p0 = v(0,0), p1 = wordSize.copy())\n    }\n\n    private lateinit var mover21: KeyboardArrowsMover\n\n    override fun startGame() {\n        addObjects()\n        super.startGame()\n    }\n\n    private fun addObjects() {\n        val center = wordSize / 2\n\n        pointer = Pointer(showHiddenMagic, center)\n\n        val clocks1: Pair<ClockPointer, ClockPointer> = createClockPointersChain()\n        val clocks2: Pair<ClockPointer, ClockPointer> = createClockPointersChain()\n\n        val worm1: Worm = createWorm(v(0, -wordSize.y/10)).withConstantSpeedMover(snakeSpeed, snakeRotationSpeed, wArea){ pointer.p }\n//            .withObjFrameDrawer(SnakesPalette.colors[0].fillStyles[0])\n        val worm2: Worm = createWorm(v(0, +wordSize.y/10))\n//            .withObjFrameDrawer(SnakesPalette.colors[1].fillStyles[0])\n        val worm11: Worm = createWorm(v(-150, -70)).withConstantSpeedMover(snakeSpeed, snakeRotationSpeed, wArea){ clocks1.second.hand }\n        val worm22: Worm = createWorm(v(-150, +70)).withConstantSpeedMover(snakeSpeed, snakeRotationSpeed, wArea){ clocks2.second.hand }\n\n        mover21 = worm2.addKeyboardAwsdMover  (snakeSpeed, wArea)\n\n        dispatcher.addObjs(worm1, worm2, worm11, worm22)\n\n        clocks1.first.centerPlace = { worm1.body.last() }\n        clocks2.first.centerPlace = { worm2.body.last() }\n\n        repeat(60){\n            dispatcher.addFood()\n        }\n\n        dispatcher.addObj(pointer)\n    }\n\n    private fun createClockPointersChain(): Pair<ClockPointer, ClockPointer> {\n        val p1  = ClockPointer(nextRandomRadius(50, 150), nextRandomSpeed())\n        val p2 = ClockPointer(nextRandomRadius(50,100), nextRandomSpeed()).apply {\n            centerPlace = { p1.hand }\n        }\n        val p3 = ClockPointer(nextRandomRadius(50,150), nextRandomSpeed()).apply {\n            centerPlace = { p2.hand }\n        }\n        dispatcher.addObjs(p1, p2, p3)\n        return p1 to p3\n    }\n\n    private var wormsCounter = 0\n    private fun createWorm(centerOffset: Vector): Worm {\n        val worm = Worm(\n            p = ws/2 + centerOffset,\n            fillStyles =  SnakesPalette.colors[wormsCounter].fillStyles,\n            strokeStyles = SnakesPalette.colors[wormsCounter].strokeStyles\n        )\n        wormsCounter++\n        return worm\n    }\n\n    override fun propagateOnKeyPress(ke: KeyboardEvent) {\n        when (ke.code) {\n            \"KeyH\" -> { showHiddenMagic = !showHiddenMagic }\n        }\n        mover21.onKeyDown(ke)\n        super.propagateOnKeyPress(ke)\n    }\n\n    override fun propagateOnKeyUp(ke: KeyboardEvent) {\n        mover21.onKeyUp(ke)\n        super.propagateOnKeyUp(ke)\n    }\n\n}\n\nfun GameObjects.addFood() {\n    val off = 27.0\n    addObj(\n        Food(\n            p =  v(off,off) + v(Random.nextDouble(ws.x-off), Random.nextDouble(ws.y-off)),\n            r = 20.0\n        )\n    )\n}\n\n\nclass ClockPointer(\n    r: Double,\n    private var tSpeed: Double,\n    private val color: String = \"#EAE791FF\"\n): Obj(r = r), Actionable, Drawable {\n\n    var t = Random.nextDouble() * PI\n    var hand: Vector = v(r,0)\n    var centerPlace: () -> Vector = {p}\n\n    override fun act() {\n        t += tSpeed\n        p.set(centerPlace())\n        hand.set(p.x + cos(t) * r, p.y + sin(t) * r)\n    }\n\n    override fun draw(ctx: CanvasRenderingContext2D) {\n        if (showHiddenMagic) {\n            ctx.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)\n            ctx.beginPath()\n            ctx.strokeStyle = color\n            ctx.lineWidth = 2.5\n            ctx.moveTo(p.x, p.y)\n            ctx.lineTo(hand.x, hand.y)\n            ctx.stroke()\n        }\n    }\n}\n\nprivate fun nextRandomSpeed(): Double {\n    val sign = if (Random.nextInt(100) > 50) 1 else -1\n    return (PI2/360) * Random.nextDouble(0.5, 1.2) * sign\n}\n\nprivate fun nextRandomRadius(r1: Int, r2: Int): Double = r1.toDouble() + Random.nextDouble(r2.toDouble())",null,"package tga.gaming.games.wiggly_worm\n\nimport org.w3c.dom.CanvasRenderingContext2D\nimport tga.gaming.engine.PI2\nimport tga.gaming.engine.model.*\nimport kotlin.math.PI\nimport kotlin.math.sin\nimport kotlin.random.Random\n\nclass Food(\n    p: Vector,\n    r: Double = 10.0,\n    val electricCharge: Boolean = Random.nextBoolean()\n) : Obj(p = p, r = r), CompositeDrawer, Actionable, Moveable {\n\n    override val drawers = ArrayList<Drawer>(1)\n\n    val speed = v()\n    val initRadius = r\n    val color = colors[Random.nextInt(colors.size)]\n\n    var t: Double = Random.nextDouble(PI/2)\n    val dt = 0.04\n    val rk: Double = 0.5 + Random.nextDouble(0.5)\n    var visibleRadius: Double = r\n\n    override fun act() {\n        t += dt\n        val sint = sin(t)\n        visibleRadius = r + r*rk*sint*sint\n    }\n\n    override fun move() {\n        p += speed\n        if (p.x < wArea.p0.x && speed.x < 0) { speed.x = -speed.x }\n        if (p.x > wArea.p1.x && speed.x > 0) { speed.x = -speed.x }\n        if (p.y < wArea.p0.y && speed.y < 0) { speed.y = -speed.y }\n        if (p.y > wArea.p1.y && speed.y > 0) { speed.y = -speed.y }\n    }\n\n    override fun draw(ctx: CanvasRenderingContext2D) {\n\n        var grd = ctx.createRadialGradient(0.0, 0.0, 0.0, 0.0, 0.0, visibleRadius)\n        grd.addColorStop(0.0, \"white\")\n        grd.addColorStop(0.4, color)\n        grd.addColorStop(0.95, \"transparent\")\n\n        ctx.beginPath()\n        ctx.arc(0.0, 0.0, visibleRadius, 0.0, PI2)\n        ctx.fillStyle = grd\n        ctx.fill()\n\n        super.draw(ctx)\n    }\n\n    companion object {\n        val colors = arrayOf(\n            \"#FFF96CFF\",\n            \"#A7FF7BFF\",\n            \"#8C00FFFF\",\n            \"#FF1F8AFF\",\n            \"#29B4FFFF\",\n            \"#FF5630FF\",\n            \"#FFFA43FF\",\n            \"#0066A4FF\",\n            \"#3B2EFFFF\",\n            \"#7BFF2EFF\",\n        )\n    }\n}\n\n","package tga.gaming.games.wiggly_worm\n\nimport tga.gaming.engine.colors.Clr\nimport tga.gaming.engine.colors.multiLinearGradient\n\nobject SnakesPalette {\n    val colors: Array<SnakeColors> = arrayOf(\n        SnakeColors(\n            fillStyles = multiLinearGradient(Clr(60, 129, 121), 10 to Clr(137, 194, 189), 10 to Clr(60, 129, 121)),\n            strokeStyles = multiLinearGradient(Clr(4, 40, 35), 10 to Clr(37, 80, 74), 10 to Clr(4, 40, 35)),\n        ),\n        SnakeColors(\n            fillStyles = multiLinearGradient(Clr(110, 21, 154), 10 to Clr(163, 107, 190), 10 to Clr(110, 21, 154)),\n            strokeStyles = multiLinearGradient(Clr(30, 3, 44), 10 to Clr(64, 38, 77), 10 to Clr(30, 3, 44)),\n        ),\n        SnakeColors(\n            fillStyles = multiLinearGradient(Clr(255, 255, 0), 10 to Clr(255, 255, 200), 10 to Clr(255, 255, 0)),\n            strokeStyles = multiLinearGradient(Clr(56, 56, 0), 10 to Clr(87,87,36), 10 to Clr(56, 56, 0)),\n        ),\n            SnakeColors(\n                fillStyles = multiLinearGradient(Clr(161,6,17), 10 to Clr(203,98,174), 10 to Clr(161,6,17)),\n                strokeStyles = multiLinearGradient(Clr(49,1,35), 10 to Clr(79,33,66), 10 to Clr(49,1,35)),\n            ),\n    )\n\n}\n\ndata class SnakeColors(\n    val fillStyles: Array<String>,\n    val strokeStyles: Array<String>,\n)","package tga.gaming.games.wiggly_worm\n\n\nclass Tip<T>(val v: T, var next: Tip<T>? = null)","package tga.gaming.games.wiggly_worm\n\nimport org.w3c.dom.BEVEL\nimport org.w3c.dom.CanvasLineJoin\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.Path2D\nimport tga.gaming.engine.*\nimport tga.gaming.engine.model.*\nimport kotlin.math.PI\nimport kotlin.math.log\nimport kotlin.random.Random\n\nclass Worm(\n    p: Vector,\n    var fillStyles: Array<String>,\n    var strokeStyles: Array<String>,\n    private val electricCharge: Boolean = Random.nextBoolean()\n): Obj(p=p),\n    CompositeDrawer, Moveable, Actionable, CompositeMover\n{\n    override val drawers = ArrayList<Drawer>()\n    override val movers = ArrayList<Mover>()\n\n    private var actionDistance: Double = initialRadius\n    override var r: Double = initialRadius\n        set(value) {\n            field = value\n            desiredBodyLength = calculateWormLength(r)\n            frame?.apply{\n                actionDistance = 10 * log(r,2.0)\n                p0.set(-r-actionDistance, -r-actionDistance)\n                p1.set(+r+actionDistance, +r+actionDistance)\n            }\n        }\n    private var desiredBodyLength: Int = calculateWormLength(r)\n\n\n    private var headPoint: Tip<Vector> = Tip(p.copy())\n    val body: MutableList<Vector> = ArrayList<Vector>(desiredBodyLength).apply {\n        repeat(desiredBodyLength){ add(p.copy()) }\n    }\n    private val bodyTip: MutableList<Tip<Vector>> = ArrayList(desiredBodyLength)\n\n\n    init {\n        positions()\n//        repeat(desiredBodyLength){\n//            body.add(p.copy())\n//            bodyTip.add(headPoint)\n//        }\n    }\n\n    private fun calculateWormLength(radius: Double): Int {\n        return radius.toInt() * 3\n        // return (r * 7).toInt() - 20\n    }\n\n    private fun positions() {\n        var center = p.copy()\n        val offset = v(-r, 0.0)\n\n        for (i in 0 until body.size) {\n            body[i].set(center)\n            center = center + offset\n        }\n\n    }\n\n    private fun eat(food: Food) {\n        val distance = food.p - this.p\n\n        if ( distance.len < (this.r + actionDistance) ) {\n            val k = when (electricCharge) {\n                food.electricCharge ->   0.05\n                else                -> - 0.05\n            }\n\n            food.speed += distance.norm() * k\n        }\n\n\n        val toEat = (this.r + food.r) - distance.len\n        if ( toEat <= 0 ) return\n\n\n        food.r = distance.len - this.r\n        if (food.r <= 0.0) {\n            food.r = 0.0\n            dispatcher.delObj(food)\n            dispatcher.addFood()\n        }\n\n        this.r += (toEat / food.initRadius) * 0.1\n\n        while (desiredBodyLength > body.size) {\n            body.add( body.last().copy() - v(0.01,0.01) )\n            //bodyTip.add(Tip(body[body.size-2], bodyTip[bodyTip.size-1] ))\n        }\n\n    }\n\n\n    override fun act() {\n        dispatcher.index.objectsOnTheSamePlaceWith(this)\n            .filter { it is Food }\n            .forEach {\n                eat(it as Food)\n            }\n\n    }\n\n\n    /*\n        private fun positions() {\n            var center = p.copy()\n            val rotateTo = -da\n            var a = PI\n\n            for (i in 0 until body.size) {\n                body[i].set(center)\n                val offset = v(cos(a), sin(a)) * r\n                center = center + offset\n                a += rotateTo\n            }\n\n        }\n    */\n\n    override fun move() {\n        super.move()\n        body[0] = p\n        headPoint.next = Tip(p.copy())\n        headPoint = headPoint.next!!\n        moveWithControlOfMaximumRotationAngle()\n\n        //moveWithMemoryOfEachPoint()\n\n    }\n\n    private fun moveWithMemoryOfEachPoint() {\n        // first circle\n\n        for (i in 1 until body.size) {\n\n            while ( (body[i-1] - body[i]).len > r ) {\n                bodyTip[i] = bodyTip[i].next!!\n                body[i] = bodyTip[i].v\n            }\n\n        }\n\n\n    }\n\n    private fun moveWithControlOfMaximumRotationAngle() {\n\n        // first circle\n        body[0] = p\n\n        // second circle\n        val d = body[1]-body[0]\n        if (d.len > r) body[1] = body[0] + d.assignLength(r)\n\n        // other circles\n        for (i in 2 until body.size) {\n            val toPrev = body[i-2] - body[i-1]\n            var toNext = body[i  ] - body[i-1]\n            val toNextNorm = toNext.norm()\n\n            val aToPrev = toPrev.norm().angle()\n            var aToNext = toNextNorm.angle()\n\n            if (aToNext < aToPrev) aToNext += PI2\n\n            val correctedAngle: Double? = when {\n                aToNext < (aToPrev + maxWiggleAngle)       -> aToPrev + maxWiggleAngle\n                aToNext > (aToPrev + PI2 - maxWiggleAngle) -> aToPrev + PI2 - maxWiggleAngle\n                else                                       -> null\n            }\n\n            if (correctedAngle == null) {\n                if (toNext.len > r) toNext = toNextNorm * r\n            } else {\n                toNext = normVectorOfAngle(correctedAngle).apply {\n                    x *= r\n                    y *= r\n                }\n            }\n\n            body[i] = body[i-1] + toNext\n        }\n\n\n    }\n\n/*\n    var t: Double = 0.0\n    var dt: Double = 0.005\n    private fun wigle() {\n        t += dt\n\n        val k = sin(t)\n        da = (d * 30) * k\n\n        positions()\n    }\n*/\n\n\n    override fun draw(ctx: CanvasRenderingContext2D) {\n        //drawWarm(ctx)\n        drawSimpleWarm(ctx)\n        //drawEyes(ctx)\n        //drawPath(ctx)\n        //drawMover(ctx)\n        super.draw(ctx)\n    }\n\n    private fun drawPath(ctx: CanvasRenderingContext2D) {\n        ctx.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)\n        ctx.beginPath()\n        ctx.moveTo(body[0].x, body[0].y)\n        for (i in 1 until body.size) {\n            ctx.lineTo(body[i].x, body[i].y)\n        }\n        ctx.lineWidth = 0.5\n        ctx.strokeStyle = \"blue\"\n        ctx.stroke()\n\n    }\n\n    /*\n        private fun drawMover(ctx: CanvasRenderingContext2D) {\n            movers.asSequence()\n                .filter { it is ConstantSpeedMover  }\n                .forEach { (it as ConstantSpeedMover).draw(ctx) }\n        }\n    */\n\n    private fun drawSimpleWarm(ctx: CanvasRenderingContext2D) {\n        ctx.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)\n        ctx.lineWidth = r/10\n        ctx.lineJoin = CanvasLineJoin.BEVEL\n\n        for(i in body.size - 1 downTo 0 ) {\n            ctx.strokeStyle = strokeStyles[i %  strokeStyles.size]\n            ctx.fillStyle = fillStyles[i % fillStyles.size]\n\n            val b = body[i]\n            ctx.beginPath()\n            ctx.arc(\n                x = b.x, y = b.y, radius = r,\n                startAngle = 0.0,\n                endAngle = PI2\n            )\n            ctx.fill()\n            ctx.stroke()\n        }\n\n    }\n\n    private fun drawEyes(ctx: CanvasRenderingContext2D) {\n\n        val d = p - body[1]\n\n        ctx.lineJoin = CanvasLineJoin.BEVEL\n        ctx.strokeStyle = strokeStyles[0]\n        ctx.lineWidth = 1.5\n\n        val baseAngle = d.norm().angle()\n        val tr1 = r / 4\n        val cX = tr1  * 3\n\n        draw1Eye(ctx, baseAngle,  eyeAngle, tr1, cX)\n        draw1Eye(ctx, baseAngle, eyeAnglem, tr1, cX)\n    }\n\n    private fun draw1Eye(ctx: CanvasRenderingContext2D, baseAngle: Double, angle: Double, tr1: Double, cX: Double) {\n\n        ctx.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)\n        ctx.translate(p.x, p.y)\n        ctx.rotate(baseAngle + angle)\n        ctx.translate(cX, 0.0)\n        ctx.fillStyle = \"white\"\n        ctx.beginPath()\n        ctx.arc(x = 0.0, y = 0.0, radius = tr1, startAngle = 0.0, endAngle = PI2)\n        ctx.fill()\n        ctx.stroke()\n\n\n        ctx.fillStyle = \"black\"\n        val rIn = tr1/2\n        val cIn = tr1/2\n        ctx.beginPath()\n        ctx.rotate(-angle)\n        ctx.translate(cIn, 0.0)\n        ctx.arc(x = 0.0, y = 0.0, radius = rIn, startAngle = 0.0, endAngle = PI2)\n        ctx.fill()\n\n    }\n\n    private fun drawWarm(ctx: CanvasRenderingContext2D) {\n        ctx.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)\n\n        ctx.lineWidth = r/10\n        ctx.lineJoin = CanvasLineJoin.BEVEL\n\n        val path = Path2D()\n\n        ctx.beginPath()\n        val centerFirst = body[0]\n        val centerSecond = body[1]\n        val angleSecondToFirst = (centerFirst - centerSecond).norm().angle()\n        val aStartFirst = - pi2_3 + angleSecondToFirst\n        val aFinishFirst = pi2_3 + angleSecondToFirst\n\n        // head\n        path.arc(\n            x = centerFirst.x, y = centerFirst.y, radius = r,\n            startAngle = aStartFirst,\n            endAngle = aFinishFirst,\n        )\n\n        // top line\n        var aOldEnd = aFinishFirst\n        for(i in 1 until body.size-1) {\n            val center = body[i]\n            val nexCenter = body[i+1]\n\n            val aStart = aOldEnd -pi_3\n\n            val vec = (center - nexCenter).norm()\n            val aEnd =  pi2_3 + vec.angle()\n\n            path.arc(x = center.x, y = center.y, radius = r, startAngle = aStart, endAngle = aEnd)\n            aOldEnd = aEnd\n        }\n\n        // tail\n        val centerLast = body[body.size-1]\n        val aStartLast = aOldEnd - pi_3\n        val aFinishLast = aStartLast + pi4_3\n        path.arc(\n            x = centerLast.x, y = centerLast.y, radius = r,\n            startAngle = aStartLast,\n            endAngle = aFinishLast,\n        )\n\n        // bottom line\n        aOldEnd = aFinishLast\n        for(i in body.size-2 downTo 1 ) {\n            val center = body[i]\n            val prevCenter = body[i-1]\n\n\n            val aStart = aOldEnd - pi_3\n\n            val vec = (prevCenter-center).norm()\n            val a = vec.angle()\n            val aEnd = pi5_3 + a\n\n            path.arc(x = center.x, y = center.y, radius = r, startAngle = aStart, endAngle = aEnd)\n            aOldEnd = aEnd\n        }\n\n/*\n\n        path.arc(\n            x = bs.x, y = bs.y, radius = r,\n            startAngle = `2 pi / 3`,\n            endAngle = 0.0,\n            anticlockwise = true\n        )\n\n*/\n        ctx.strokeStyle = \"#D8B08C\"\n        ctx.fillStyle = \"#0F6466\"\n        ctx.fill(path)\n        ctx.stroke(path)\n    }\n\n    companion object {\n        const val eyeAngle = PI / 8\n        const val eyeAnglem = -eyeAngle\n        const val initialRadius: Double = 30.0\n        const val maxWiggleAngle = PI / 180 * 160\n    }\n}","package tga.gaming.games.zombie.objects\n\nimport tga.gaming.engine.drawers.withImageDrawer\nimport tga.gaming.engine.image.loadImage\nimport tga.gaming.engine.index.gridStepD\nimport tga.gaming.engine.model.*\nimport kotlin.math.PI\nimport kotlin.math.sin\n\nclass KotlinSign(\n    p: Vector = v(),\n    private val speed: Double = 0.05,\n    r: Double = gridStepD-5.0\n) : Obj(p = p, r = r),\n    CompositeDrawer,\n    Actionable\n{\n    override val drawers = mutableListOf<Drawer>()\n    private var t = 0.0\n\n    init {\n        withImageDrawer(loadImage(\"/game/zombie/img/kotlin-logo.svg\"))\n    }\n\n    override fun act() {\n        t += speed\n        angle = amplitude * sin(t)\n    }\n\n    companion object {\n        const val amplitude = PI /4\n    }\n}\n","package tga.gaming.games.zombie.objects\n\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.events.KeyboardEvent\nimport org.w3c.dom.events.MouseEvent\nimport tga.gaming.engine.dispatcher.SimpleEventsListener\nimport tga.gaming.engine.drawers.withImagesDrawer\nimport tga.gaming.engine.image.loadImages\nimport tga.gaming.engine.index.gridStepD\nimport tga.gaming.engine.model.*\nimport tga.gaming.engine.model.Vector.Companion.angle_90\nimport kotlin.math.PI\n\nfun playerObj(\n    p: Vector,\n    bounds: Vector\n): PlayerObj {\n    val player = PlayerObj(p, bounds = bounds).apply {\n        //withObjFrameDrawer()\n        //withObjPositionDrawer()\n    }\n    return player\n}\n\nclass PlayerObj(\n    p: Vector,\n    r: Double = gridStepD-1,\n    override var frame: Frame = Frame.square(r),\n    val bounds: Vector\n) : Obj(p = p, r = r),\n    CompositeDrawer,\n    SimpleEventsListener,\n    Moveable,\n    Actionable\n{\n    override val drawers = ArrayList<Drawer>()\n\n    private var direction: Vector = v(1,0)\n    private var speed: Vector? = null\n\n    private var isUpKeyPressed    = false\n    private var isRightKeyPressed = false\n    private var isDownKeyPressed  = false\n    private var isLeftKeyPressed  = false\n\n    val maxVisibility: Double = 100.0\n    var visibility: Double = maxVisibility\n\n    val imagesDrawer = withImagesDrawer(playerImages)\n    override fun draw(ctx: CanvasRenderingContext2D) {\n        ctx.globalAlpha = when {\n                visibility <= 0 -> 0.0\n                visibility > 0 && visibility <= maxVisibility -> visibility / maxVisibility\n                else -> 1.0\n            }\n        super.draw(ctx)\n        ctx.globalAlpha = 1.0\n    }\n\n    override fun onMouseMove(me: MouseEvent) {\n        val toMouse = v(me.x - p.x, me.y - p.y).normalizeThis()\n        direction.set(toMouse)\n        angle = direction.angle()\n        when {\n            (angle >  angle_90) -> angle += PI\n            (angle < -angle_90) -> angle += PI\n        }\n    }\n\n    override fun onKeyDown(ke: KeyboardEvent) {\n        when (ke.code) {\n            \"KeyW\" -> if (!isUpKeyPressed )   { isUpKeyPressed    = true; updateSpeed() }\n            \"KeyD\" -> if (!isRightKeyPressed) { isRightKeyPressed = true; updateSpeed() }\n            \"KeyS\" -> if (!isDownKeyPressed ) { isDownKeyPressed  = true; updateSpeed() }\n            \"KeyA\" -> if (!isLeftKeyPressed ) { isLeftKeyPressed  = true; updateSpeed() }\n        }\n    }\n\n    override fun onKeyUp(ke: KeyboardEvent) {\n        when (ke.code) {\n            \"KeyW\" -> if (isUpKeyPressed)    { isUpKeyPressed    = false; updateSpeed() }\n            \"KeyD\" -> if (isRightKeyPressed) { isRightKeyPressed = false; updateSpeed() }\n            \"KeyS\" -> if (isDownKeyPressed)  { isDownKeyPressed  = false; updateSpeed() }\n            \"KeyA\" -> if (isLeftKeyPressed)  { isLeftKeyPressed  = false; updateSpeed() }\n        }\n    }\n\n    private fun updateSpeed() {\n        val dx: Int = when {\n            isRightKeyPressed == isLeftKeyPressed -> 0\n            isRightKeyPressed                     -> 1\n            isLeftKeyPressed                      -> -1\n            else                                  -> 0\n        }\n\n        val dy: Int = when {\n            isUpKeyPressed == isDownKeyPressed -> 0\n            isDownKeyPressed                   -> 1\n            isUpKeyPressed                     -> -1\n            else                               -> 0\n        }\n\n        when {\n            dx ==  0 && dy ==  0 -> speed = null\n            dx ==  0 && dy == -1 -> speed = vUp * 5\n            dx ==  1 && dy == -1 -> speed = vUpRight * 5\n            dx ==  1 && dy ==  0 -> speed = vRight * 5\n            dx ==  1 && dy ==  1 -> speed = vDownRight * 5\n            dx ==  0 && dy ==  1 -> speed = vDown * 5\n            dx == -1 && dy ==  1 -> speed = vDownLeft * 5\n            dx == -1 && dy ==  0 -> speed = vLeft * 5\n            dx == -1 && dy == -1 -> speed = vUpLeft * 5\n        }\n\n    }\n\n    override fun onClick(me: MouseEvent) {\n        imagesDrawer.nextImage()\n    }\n\n    override fun move() {\n        if (speed != null) {\n            p += speed!!\n            if (p.x > bounds.x) p.x = bounds.x else if (p.x < 0.0) p.x = 0.0\n            if (p.y > bounds.y) p.y = bounds.y else if (p.y < 0.0) p.y = 0.0\n        }\n    }\n\n    override fun act() {\n        if (visibility > 0) {\n            dispatcher.index.objectsOnTheSamePlaceWith(this).forEach {\n                when (it) {\n                    is Ghost -> {\n                        visibility -= 10\n                        dispatcher.delObj(it)\n                    }\n                    is KotlinSign -> {\n                        dispatcher.delObj(it)\n                        visibility = maxVisibility\n                    }\n\n                }\n            }\n        }\n    }\n\n    companion object {\n        val playerImages = loadImages(\"/game/zombie/img/actor<n>.png\", 11)\n    }\n}\n\n","package tga.gaming.games.zombie.objects\n\nimport tga.gaming.engine.drawers.withImagesDrawer\nimport tga.gaming.engine.image.loadImages\nimport tga.gaming.engine.index.gridStepD\nimport tga.gaming.engine.model.*\nimport kotlin.random.Random.Default.nextInt\n\nclass Ghost (\n    p: Vector,\n    private val player: PlayerObj,\n    r: Double = gridStepD -1,\n    override var frame: Frame = Frame.square(r),\n) : Obj(p = p, r=r),\n    CompositeDrawer,\n    Moveable\n{\n    override val drawers = ArrayList<Drawer>()\n    private var speed: Vector? = (player.p - p)\n\n    private var maxSpeedLen = 5.0\n    private var speedLen = 0.5\n\n    init {\n        angle = (player.p - p).angle()\n        withImagesDrawer(ghostImages, nextInt(6))\n        // withObjPositionDrawer(strokeStyle = \"#AD559AFF\")\n        // withObjFrameDrawer(strokeStyle = \"#AD559AFF\")\n    }\n\n    private var speedDirectionTurnsCounter = 0\n    override fun move() {\n        if (speedLen < maxSpeedLen) { speedLen += 0.0005; speed?.assignLength(speedLen) }\n\n        speedDirectionTurnsCounter++\n        if (speedDirectionTurnsCounter == 50) {\n            speedDirectionTurnsCounter = 0\n            speed = (player.p - p).assignLength(speedLen)\n            angle = speed!!.angle()\n        }\n\n        speed?.let{ p += it}\n    }\n\n    companion object {\n        val ghostImages = loadImages(\"game/zombie/img/gost-<n>.gif\", 6)\n    }\n\n}\n",null,null,null,"package tga.gaming.engine.index\n\nimport tga.gaming.engine.model.Obj\n\ninterface SquareIndex {\n\n    val lines  : Int\n    val columns: Int\n    val matrix: Array<Array<MutableSet<Obj>>>\n\n    fun update(objects: Collection<Obj>) {\n        objects.forEach { update(it) }\n    }\n\n    fun update(obj: Obj)\n\n    fun remove(objects: Collection<Obj>) {\n        objects.forEach { remove(it) }\n    }\n\n    fun remove(obj: Obj)\n\n    fun objectsOnTheSamePlaceWith(obj: Obj): Sequence<Obj>\n\n    fun reset()\n\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(31);\n"],"names":["root","factory","exports","module","define","amd","this","ctx","window","addEventListener","e","me","pe","ke","c0","c1","r0","n","g0","b0","o0","Clr","rStep","gStep","bStep","oStep","prevEndColor","points","endColor","linearGradient","startColor","part","i","colors","a","ImagesDrawer","imageIndex","images","imagesDrawer","image","path","document","createElement","src","loadImage","except","forEach","body","l","c","lin","line","cell","wordSize","Frame","r","Vector","x","y","bounds","message","cause","maxSpeed","mover","dx","dy","getContext","width","height","Pointer","indicate","initPos","pointer","v","CircleDrawer","game","gameName","ObjectsDispatcher","ObjectsSquareIndex","size","canvas","innerWidth","innerHeight","appendChild","initCanvas","getElementById","switchGame","MagnifyingGlass","numberOfCircles","Circle","offset","wholeWordSize","generateCircles","GameWord","dsp","HtmlCanvas2dRenderer","p","speedLength","center","createClockPointersChain","ConstantSpeedMover","createWorm","addKeyboardAwsdMover","worm2","worm1","worm11","worm22","clocks1","last","clocks2","addFood","nextRandomRadius","nextRandomSpeed","p1","p2","p3","centerOffset","worm","sign","r1","r2","radius","food","distance","k","toEat","it","calculateWormLength","positions","loadImages","withImagesDrawer","listOf","img","console","log","runEventListeners","setInterval","setTimeout","performance","now","clearInterval","code","requestAnimationFrame","padStart","toString","oldPosition","doMove","doAct","removeDeletedObjects","addNewObjects","obj","objs","te","beginPath","strokeStyle","lineWidth","arc","stroke","first","drawImage","f","frame","position","l0","y0","x0","l1","y1","x1","PositionsRange2D","rangeOfObject","prev","curr","forEachExcept","emptySequence","positionsRange","asSequence","objects","filter","other","hashCode","calculateLength","desiredLength","quite","target","restrictWithFrame","updateSpeed","setTransform","translate","scale","rotate","index","count","strokeText","textBaseline","rect","touches","item","movementProcess","initObjects","fillStyle","fill","draw","sint","grd","createRadialGradient","addColorStop","addObjects","moveTo","lineTo","value","eat","move","d","toNext","toPrev","aToNext","toNextNorm","aToPrev","correctedAngle","moveWithControlOfMaximumRotationAngle","lineJoin","b","drawSimpleWarm","KotlinSign","println","button","globalAlpha","toMouse","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}